-- Jack Ditzel
-- Section: 11610

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Datapath is
    port (
        clk : in std_logic;
        PCWriteCond : in std_logic;
        PCWrite : in std_logic; 
        IorD : in std_logic; 
        MemRead : in std_logic; 
        MemWrite : in std_logic; 
        MemToReg : in std_logic; 
        IRWrite : in std_logic; 
        JumpAndLink : in std_logic; 
        IsSigned : in std_logic; 
        PCSource : in std_logic; 
        ALUOp : in std_logic; 
        ALUSrcB : in std_logic; 
        ALUSrcA : in std_logic; 
        RegWrite : in std_logic; 
        RegDst : in std_logic;
        inport0_in: in std_logic_vector(31 downto 0);
        inport0_en: in std_logic;
        inport1_in: in std_logic_vector(31 downto 0);
        inport1_en: in std_logic;
        outport:    out std_logic_vector(31 downto 0)
    );
end Datapath;

-- Datapath structural architecture
architecture str of Datapath is

    component ZeroExtend is
        port (
            switches : in std_logic_vector(9 downto 0);
            inport : out std_logic_vector(31 downto 0)
        );
    end component;

    component SignExtend is
        port (
            input : in std_logic_vector(15 downto 0);
            is_signed : in std_logic;
            output : out std_logic_vector(31 downto 0)
        );
    end component;

    component ShiftLeft is
        port (
            input : in std_logic_vector(31 downto 0);
            output : out std_logic_vector(31 downto 0)
        );
    end component;

    component ALUControl is
        port (
            ir : in std_logic_vector(5 downto 0);
            alu_op : in std_logic;
            opsel : out std_logic_vector(4 downto 0);
            alu_lo_hi : out std_logic_vector(1 downto 0);
            hi_en : out std_logic;
            lo_en : out std_logic
        );
    end component;

    component Concat is
        port (
            input : in std_logic_vector(27 downto 0);
            pc : in std_logic_vector(3 downto 0);
            output : out std_logic_vector(31 downto 0)
        );
    end component;

    component Memory is
        port (
            clk : in std_logic;
            baddr : in std_logic_vector(31 downto 0);
            data_in : in std_logic_vector(31 downto 0);
            mem_read : in std_logic;
            mem_write : in std_logic;
            data_out : out std_logic_vector(31 downto 0);
            inport0_in : in std_logic_vector(31 downto 0);
            inport0_en : in std_logic;
            inport1_in : in std_logic_vector(31 downto 0);
            inport1_en : in std_logic;
            outport : out std_logic_vector(31 downto 0)
        );
    end component;

    component Mux2to1 is
        generic (WIDTH : integer := 32);
        port (
            a : in std_logic_vector(WIDTH - 1 downto 0);
            b : in std_logic_vector(WIDTH - 1 downto 0);
            sel : in std_logic;
            y : out std_logic_vector(WIDTH - 1 downto 0)
        );
    end component;

    component Mux3to1 is
        generic (WIDTH : integer := 32);
        port (
            a : in std_logic_vector(WIDTH - 1 downto 0);
            b : in std_logic_vector(WIDTH - 1 downto 0);
            c : in std_logic_vector(WIDTH - 1 downto 0);
            sel : in std_logic_vector(1 downto 0);
            y : out std_logic_vector(WIDTH - 1 downto 0)
        );
    end component;

    component Mux4to1 is
        generic (WIDTH : integer := 32);
        port (
            a : in std_logic_vector(WIDTH - 1 downto 0);
            b : in std_logic_vector(WIDTH - 1 downto 0);
            c : in std_logic_vector(WIDTH - 1 downto 0);
            d : in std_logic_vector(WIDTH - 1 downto 0);
            sel : in std_logic_vector(1 downto 0);
            y : out std_logic_vector(WIDTH - 1 downto 0)
        );
    end component;

    component Reg is
        generic (
            WIDTH : integer := 32
        );
        port (
            clk : in std_logic;
            rst : in std_logic;
            en : in std_logic;
            d : in std_logic_vector(WIDTH-1 downto 0);
            q : out std_logic_vector(WIDTH-1 downto 0)
        );
    end component;

    component ALU is
        port (
            a : in std_logic_vector(31 downto 0);
            b : in std_logic_vector(31 downto 0);
            opsel : in std_logic_vector(4 downto 0);
            shamt : in std_logic_vector(4 downto 0);
            result : out std_logic_vector(31 downto 0);
            result_hi : out std_logic_vector(31 downto 0);
            branch_taken : out std_logic
        );
    end component;

    signal pc_in : std_logic_vector(31 downto 0);
    signal pc_out : std_logic_vector(31 downto 0);
    signal pc_en : std_logic;
    signal mem_baddr : std_logic_vector(31 downto 0);

    signal rega_in : std_logic_vector(31 downto 0);
    signal regb_in : std_logic_vector(31 downto 0);
    signal rega_out : std_logic_vector(31 downto 0);
    signal regb_out : std_logic_vector(31 downto 0);
    signal alu_out : std_logic_vector(31 downto 0);
    signal lo_out : std_logic_vector(31 downto 0);
    signal hi_out : std_logic_vector(31 downto 0);
    signal hi_en : std_logic;
    signal lo_en : std_logic;
    signal alu_lo_hi : std_logic;
    
    signal ir25_0 : std_logic_vector(25 downto 0);
    signal ir31_26 : std_logic_vector(5 downto 0);
    signal ir25_21 : std_logic_vector(4 downto 0);
    signal ir20_16 : std_logic_vector(4 downto 0);
    signal ir15_11 : std_logic_vector(4 downto 0);
    signal ir15_0 : std_logic_vector(15 downto 0);
    signal ir5_0 : std_logic_vector(5 downto 0);
    signal ir10_6 : std_logic_vector(4 downto 0);
    signal ir_out : std_logic_vector(31 downto 0);
    signal pc31_28 : std_logic_vector(3 downto 0);

    signal mem_out : std_logic_vector(31 downto 0);
    signal memreg_out : std_logic_vector(31 downto 0);
    signal opsel : std_logic_vector(4 downto 0);
    signal alu_res : std_logic_vector(31 downto 0);
    signal alu_res_hi : std_logic_vector(31 downto 0);
    signal branch_taken : std_logic;

    signal regfile_writereg : std_logic_vector(31 downto 0);
    signal regfile_writedata : std_logic_vector(31 downto 0);
    signal alu_mux_out : std_logic_vector(31 downto 0);
    signal sl_out : std_logic_vector(27 downto 0);
    signal concat_out : std_logic_vector(31 downto 0);
    signal signex_out : std_logic_vector(31 downto 0);
    signal signex_sl_out : std_logic_vector(31 downto 0);
    signal alu_a : std_logic_vector(31 downto 0);
    signal alu_b : std_logic_vector(31 downto 0);

begin

    pc_en <= (PCWrite or (branch_taken and PCWriteCond));

    pc: Reg 
        generic map (WIDTH => 32)
        port map (clk => clk, rst => '0', en => pc_en, d => pc_in, q => pc_out);

    mem_mux: Mux2to1 
        generic map (WIDTH => 32)
        port map (a => pc_out, b => alu_out, sel => IorD, y => mem_baddr);

    mem_module: Memory
        port map (
            clk => clk,
            baddr => mem_baddr,
            data_in => regb_out,
            mem_read => MemRead,
            mem_write => MemWrite,
            data_out => mem_out,
            inport0_in => inport0_in,
            inport0_en => inport0_en,
            inport1_in => inport1_in,
            inport1_en => inport1_en,
            outport => outport);

    ir: Reg
        generic map (WIDTH => 32)
        port map (clk => clk, rst => '0', en => IRWrite, d => mem_out, q => ir_out);

    ir25_0 <= ir_out(25 downto 0);
    ir31_26 <= ir_out(31 downto 26);
    ir25_21 <= ir_out(25 downto 21);
    ir20_16 <= ir_out(20 downto 16);
    ir15_11 <= ir_out(15 downto 11);
    ir15_0 <= ir_out(15 downto 0);
    ir5_0 <= ir_out(5 downto 0);
    ir10_6 <= ir_out(10 downto 6);

    mem_data_reg: Reg
        generic map (WIDTH => 32)
        port map (clk => clk, rst => '0', en => '1', d => mem_out, q => memreg_out);

    regfile_writereg_mux: Mux2to1
        generic map (WIDTH => 5)
        port map (a => ir20_16, b => ir15_11, sel => RegDst, y => regfile_writereg);

    regfile_writedata_mux: Mux2to1
        generic map (WIDTH => 5)
        port map (a => alu_mux_out, b => memreg_out, sel => MemToReg, y => regfile_writedata);

end str;















library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Zero Extend Entity
entity ZeroExtend is
    port (
        switches : in std_logic_vector(9 downto 0);
        inport : out std_logic_vector(31 downto 0)
    );
end ZeroExtend;

architecture bhv of ZeroExtend is
begin

end bhv;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Sign Extend Entity
entity SignExtend is
    port (
        input : in std_logic_vector(15 downto 0);
        is_signed : in std_logic;
        output : out std_logic_vector(31 downto 0)
    );
end SignExtend;

architecture bhv of SignExtend is
begin
    
end bhv;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Shift Left Entity
entity ShiftLeft is
    port (
        input : in std_logic_vector(31 downto 0);
        output : out std_logic_vector(31 downto 0)
    );
end ShiftLeft;

architecture bhv of ShiftLeft is
begin
        
end bhv;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- ALU Control
entity ALUControl is
    port (
        ir : in std_logic_vector(5 downto 0);
        alu_op : in std_logic;
        opsel : out std_logic_vector(4 downto 0);
        alu_lo_hi : out std_logic_vector(1 downto 0);
        hi_en : out std_logic;
        lo_en : out std_logic
    );
end ALUControl;

architecture bhv of ALUControl is
    begin
            
end bhv;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Concat Entity
entity Concat is
    port (
        input : in std_logic_vector(27 downto 0);
        pc : in std_logic_vector(3 downto 0);
        output : out std_logic_vector(31 downto 0)
    );
end Concat;

architecture bhv of Concat is
begin
            
end bhv;

